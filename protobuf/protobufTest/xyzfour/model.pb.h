// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_model_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_model_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_model_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_model_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_model_2eproto;
namespace hello {
class MyData;
class MyDataDefaultTypeInternal;
extern MyDataDefaultTypeInternal _MyData_default_instance_;
}  // namespace hello
PROTOBUF_NAMESPACE_OPEN
template<> ::hello::MyData* Arena::CreateMaybeMessage<::hello::MyData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hello {

// ===================================================================

class MyData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hello.MyData) */ {
 public:
  inline MyData() : MyData(nullptr) {};
  virtual ~MyData();

  MyData(const MyData& from);
  MyData(MyData&& from) noexcept
    : MyData() {
    *this = ::std::move(from);
  }

  inline MyData& operator=(const MyData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MyData& operator=(MyData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MyData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MyData* internal_default_instance() {
    return reinterpret_cast<const MyData*>(
               &_MyData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MyData& a, MyData& b) {
    a.Swap(&b);
  }
  inline void Swap(MyData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MyData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MyData* New() const final {
    return CreateMaybeMessage<MyData>(nullptr);
  }

  MyData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MyData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MyData& from);
  void MergeFrom(const MyData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MyData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hello.MyData";
  }
  protected:
  explicit MyData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_model_2eproto);
    return ::descriptor_table_model_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 9,
    kTimestampFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
    kQxFieldNumber = 5,
    kQyFieldNumber = 6,
    kQzFieldNumber = 7,
    kQwFieldNumber = 8,
  };
  // string username = 9;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // uint64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double x = 2;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 3;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 4;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // double qx = 5;
  void clear_qx();
  double qx() const;
  void set_qx(double value);
  private:
  double _internal_qx() const;
  void _internal_set_qx(double value);
  public:

  // double qy = 6;
  void clear_qy();
  double qy() const;
  void set_qy(double value);
  private:
  double _internal_qy() const;
  void _internal_set_qy(double value);
  public:

  // double qz = 7;
  void clear_qz();
  double qz() const;
  void set_qz(double value);
  private:
  double _internal_qz() const;
  void _internal_set_qz(double value);
  public:

  // double qw = 8;
  void clear_qw();
  double qw() const;
  void set_qw(double value);
  private:
  double _internal_qw() const;
  void _internal_set_qw(double value);
  public:

  // @@protoc_insertion_point(class_scope:hello.MyData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  double x_;
  double y_;
  double z_;
  double qx_;
  double qy_;
  double qz_;
  double qw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_model_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MyData

// uint64 timestamp = 1;
inline void MyData::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MyData::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MyData::timestamp() const {
  // @@protoc_insertion_point(field_get:hello.MyData.timestamp)
  return _internal_timestamp();
}
inline void MyData::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void MyData::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:hello.MyData.timestamp)
}

// double x = 2;
inline void MyData::clear_x() {
  x_ = 0;
}
inline double MyData::_internal_x() const {
  return x_;
}
inline double MyData::x() const {
  // @@protoc_insertion_point(field_get:hello.MyData.x)
  return _internal_x();
}
inline void MyData::_internal_set_x(double value) {
  
  x_ = value;
}
inline void MyData::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:hello.MyData.x)
}

// double y = 3;
inline void MyData::clear_y() {
  y_ = 0;
}
inline double MyData::_internal_y() const {
  return y_;
}
inline double MyData::y() const {
  // @@protoc_insertion_point(field_get:hello.MyData.y)
  return _internal_y();
}
inline void MyData::_internal_set_y(double value) {
  
  y_ = value;
}
inline void MyData::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:hello.MyData.y)
}

// double z = 4;
inline void MyData::clear_z() {
  z_ = 0;
}
inline double MyData::_internal_z() const {
  return z_;
}
inline double MyData::z() const {
  // @@protoc_insertion_point(field_get:hello.MyData.z)
  return _internal_z();
}
inline void MyData::_internal_set_z(double value) {
  
  z_ = value;
}
inline void MyData::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:hello.MyData.z)
}

// double qx = 5;
inline void MyData::clear_qx() {
  qx_ = 0;
}
inline double MyData::_internal_qx() const {
  return qx_;
}
inline double MyData::qx() const {
  // @@protoc_insertion_point(field_get:hello.MyData.qx)
  return _internal_qx();
}
inline void MyData::_internal_set_qx(double value) {
  
  qx_ = value;
}
inline void MyData::set_qx(double value) {
  _internal_set_qx(value);
  // @@protoc_insertion_point(field_set:hello.MyData.qx)
}

// double qy = 6;
inline void MyData::clear_qy() {
  qy_ = 0;
}
inline double MyData::_internal_qy() const {
  return qy_;
}
inline double MyData::qy() const {
  // @@protoc_insertion_point(field_get:hello.MyData.qy)
  return _internal_qy();
}
inline void MyData::_internal_set_qy(double value) {
  
  qy_ = value;
}
inline void MyData::set_qy(double value) {
  _internal_set_qy(value);
  // @@protoc_insertion_point(field_set:hello.MyData.qy)
}

// double qz = 7;
inline void MyData::clear_qz() {
  qz_ = 0;
}
inline double MyData::_internal_qz() const {
  return qz_;
}
inline double MyData::qz() const {
  // @@protoc_insertion_point(field_get:hello.MyData.qz)
  return _internal_qz();
}
inline void MyData::_internal_set_qz(double value) {
  
  qz_ = value;
}
inline void MyData::set_qz(double value) {
  _internal_set_qz(value);
  // @@protoc_insertion_point(field_set:hello.MyData.qz)
}

// double qw = 8;
inline void MyData::clear_qw() {
  qw_ = 0;
}
inline double MyData::_internal_qw() const {
  return qw_;
}
inline double MyData::qw() const {
  // @@protoc_insertion_point(field_get:hello.MyData.qw)
  return _internal_qw();
}
inline void MyData::_internal_set_qw(double value) {
  
  qw_ = value;
}
inline void MyData::set_qw(double value) {
  _internal_set_qw(value);
  // @@protoc_insertion_point(field_set:hello.MyData.qw)
}

// string username = 9;
inline void MyData::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MyData::username() const {
  // @@protoc_insertion_point(field_get:hello.MyData.username)
  return _internal_username();
}
inline void MyData::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:hello.MyData.username)
}
inline std::string* MyData::mutable_username() {
  // @@protoc_insertion_point(field_mutable:hello.MyData.username)
  return _internal_mutable_username();
}
inline const std::string& MyData::_internal_username() const {
  return username_.Get();
}
inline void MyData::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MyData::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hello.MyData.username)
}
inline void MyData::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hello.MyData.username)
}
inline void MyData::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hello.MyData.username)
}
inline std::string* MyData::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MyData::release_username() {
  // @@protoc_insertion_point(field_release:hello.MyData.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MyData::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hello.MyData.username)
}
inline std::string* MyData::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hello.MyData.username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MyData::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hello.MyData.username)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace hello

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_model_2eproto
